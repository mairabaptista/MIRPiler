# C- Compilation for intermediate code

***************************************

1: (function, load_proc_context, _, _)
2: (get param, proc_index, _, _)
3: (param list, 1, _, _)
4: (set param, 89, _, _)
5: (call, output, 1, T6)
6: (array value, FILE_MAX_SIZES, proc_index, T7)
7: (assign, transfer_iterations, T7, _)
8: (assign, transfer_index, 0, _)
9: (param list, 1, _, _)
10: (set param, proc_index, _, _)
11: (call, output, 1, T8)
12: (param list, 1, _, _)
13: (array value, FILE_ID, 3, T9)
14: (set param, T9, _, _)
15: (call, output, 1, T10)
16: (param list, 1, _, _)
17: (array value, FILE_ID, 4, T11)
18: (set param, T11, _, _)
19: (call, output, 1, T12)
20: (param list, 1, _, _)
21: (set param, MEM_SIZE, _, _)
22: (call, output, 1, T13)
23: (multiplication, MEM_SIZE, proc_index, T14)
24: (assign, hd_address, T14, _)
25: (param list, 1, _, _)
26: (set param, hd_address, _, _)
27: (call, output, 1, T15)
28: (label, L1, _, _)
29: (less than, transfer_index, transfer_iterations, T16)
30: (jump if false, T16, L2, _)
31: (param list, 1, _, _)
32: (set param, hd_address, _, _)
33: (call, lhd, 1, T17)
34: (assign, instruction, T17, _)
35: (param list, 2, _, _)
36: (set param, instruction, _, _)
37: (set param, transfer_index, _, _)
38: (call, smemproc, 2, T18)
39: (addition, transfer_index, 1, T19)
40: (assign, transfer_index, T19, _)
41: (addition, hd_address, 1, T20)
42: (assign, hd_address, T20, _)
43: (goto, L1, _, _)
44: (label, L2, _, _)
45: (param list, 1, _, _)
46: (set param, transfer_index, _, _)
47: (call, output, 1, T21)
48: (param list, 1, _, _)
49: (set param, 99, _, _)
50: (call, output, 1, T22)
51: (return, _, _, _)
52: (function, circular_queue, _, _)
53: (get param, amount, _, _)
54: (assign, finished_procs, 0, _)
55: (assign, queue_index, 0, _)
56: (assign, proc_pc, 0, _)
57: (param list, 1, _, _)
58: (set param, 4, _, _)
59: (call, lcd, 1, T23)
60: (param list, 0, _, _)
61: (call, input, 0, T24)
62: (assign, BASH_STOP, T24, _)
63: (label, L3, _, _)
64: (less than, finished_procs, amount, T25)
65: (jump if false, T25, L10, _)
66: (param list, 1, _, _)
67: (set param, 12, _, _)
68: (call, output, 1, T26)
69: (param list, 1, _, _)
70: (set param, 13, _, _)
71: (call, output, 1, T27)
72: (array value, PROCESS_QUEUE, queue_index, T28)
73: (assign, proc_ID, T28, _)
74: (assign, proc_index, proc_ID, _)
75: (array value, STATE_PROC, proc_index, T29)
76: (equal, T29, 0, T30)
77: (jump if false, T30, L7, _)
78: (param list, 1, _, _)
79: (set param, proc_index, _, _)
80: (call, output, 1, T31)
81: (array value, PROC_PCS, proc_index, T32)
82: (assign, proc_pc, T32, _)
83: (param list, 1, _, _)
84: (set param, proc_pc, _, _)
85: (call, set_proc_pc, 1, T33)
86: (param list, 1, _, _)
87: (set param, proc_index, _, _)
88: (call, load_proc_context, 1, T34)
89: (param list, 1, _, _)
90: (set param, proc_index, _, _)
91: (call, swap_process, 1, T35)
92: (param list, 0, _, _)
93: (call, recover_os, 0, T36)
94: (param list, 1, _, _)
95: (set param, 70, _, _)
96: (call, output, 1, T37)
97: (param list, 0, _, _)
98: (call, get_interruption, 0, T38)
99: (assign, INTERRUPTION, T38, _)
100: (param list, 1, _, _)
101: (set param, INTERRUPTION, _, _)
102: (call, output, 1, T39)
103: (param list, 0, _, _)
104: (call, get_proc_pc, 0, T40)
105: (array address, PROC_PCS, proc_index, T41)
106: (assign, T41, T40, _)
107: (equal, INTERRUPTION, 1, T42)
108: (jump if false, T42, L4, _)
109: (param list, 1, _, _)
110: (set param, INTERRUPTION, _, _)
111: (call, output, 1, T43)
112: (param list, 0, _, _)
113: (call, input, 0, T44)
114: (assign, io_aux, T44, _)
115: (param list, 1, _, _)
116: (set param, io_aux, _, _)
117: (call, output, 1, T45)
118: (param list, 1, _, _)
119: (set param, io_aux, _, _)
120: (call, move_OS_to_proc, 1, T46)
121: (label, L4, _, _)
122: (equal, INTERRUPTION, 2, T47)
123: (jump if false, T47, L5, _)
124: (param list, 1, _, _)
125: (set param, INTERRUPTION, _, _)
126: (call, output, 1, T48)
127: (param list, 0, _, _)
128: (call, move_proc_to_OS, 0, T49)
129: (assign, io_aux, T49, _)
130: (param list, 1, _, _)
131: (set param, io_aux, _, _)
132: (call, output, 1, T50)
133: (label, L5, _, _)
134: (equal, INTERRUPTION, 3, T51)
135: (jump if false, T51, L6, _)
136: (param list, 1, _, _)
137: (set param, INTERRUPTION, _, _)
138: (call, output, 1, T52)
139: (param list, 1, _, _)
140: (set param, proc_index, _, _)
141: (call, output, 1, T53)
142: (array address, STATE_PROC, proc_index, T54)
143: (assign, T54, 1, _)
144: (addition, finished_procs, 1, T55)
145: (assign, finished_procs, T55, _)
146: (label, L6, _, _)
147: (label, L7, _, _)
148: (subtraction, amount, 1, T56)
149: (less than, queue_index, T56, T57)
150: (jump if false, T57, L8, _)
151: (addition, queue_index, 1, T58)
152: (assign, queue_index, T58, _)
153: (goto, L9, _, _)
154: (label, L8, _, _)
155: (assign, queue_index, 0, _)
156: (label, L9, _, _)
157: (goto, L3, _, _)
158: (label, L10, _, _)
159: (param list, 1, _, _)
160: (set param, 5, _, _)
161: (call, lcd, 1, T59)
162: (param list, 0, _, _)
163: (call, input, 0, T60)
164: (assign, BASH_STOP, T60, _)
165: (return, _, _, _)
166: (function, reset_queue, _, _)
167: (label, L11, _, _)
168: (less than, i, 10, T61)
169: (jump if false, T61, L12, _)
170: (array address, PROCESS_QUEUE, i, T62)
171: (assign, T62, 0, _)
172: (addition, i, 1, T63)
173: (assign, i, T63, _)
174: (goto, L11, _, _)
175: (label, L12, _, _)
176: (param list, 1, _, _)
177: (set param, 87, _, _)
178: (call, output, 1, T64)
179: (return, _, _, _)
180: (function, reset_pcs, _, _)
181: (label, L13, _, _)
182: (less than, i, 10, T65)
183: (jump if false, T65, L14, _)
184: (array address, PROC_PCS, i, T66)
185: (assign, T66, 0, _)
186: (addition, i, 1, T67)
187: (assign, i, T67, _)
188: (goto, L13, _, _)
189: (label, L14, _, _)
190: (param list, 1, _, _)
191: (set param, 47, _, _)
192: (call, output, 1, T68)
193: (return, _, _, _)
194: (function, process_handling, _, _)
195: (param list, 1, _, _)
196: (set param, 2, _, _)
197: (call, lcd, 1, T69)
198: (param list, 0, _, _)
199: (call, input, 0, T70)
200: (assign, amount, T70, _)
201: (param list, 1, _, _)
202: (set param, amount, _, _)
203: (call, output, 1, T71)
204: (assign, inqueue, 0, _)
205: (param list, 1, _, _)
206: (set param, 3, _, _)
207: (call, lcd, 1, T72)
208: (label, L15, _, _)
209: (less than, inqueue, amount, T73)
210: (jump if false, T73, L16, _)
211: (param list, 0, _, _)
212: (call, input, 0, T74)
213: (assign, proc_ID, T74, _)
214: (param list, 1, _, _)
215: (set param, proc_ID, _, _)
216: (call, output, 1, T75)
217: (array address, PROCESS_QUEUE, inqueue, T76)
218: (assign, T76, proc_ID, _)
219: (array address, STATE_PROC, inqueue, T77)
220: (assign, T77, 0, _)
221: (addition, inqueue, 1, T78)
222: (assign, inqueue, T78, _)
223: (goto, L15, _, _)
224: (label, L16, _, _)
225: (param list, 1, _, _)
226: (set param, amount, _, _)
227: (call, circular_queue, 1, T79)
228: (param list, 0, _, _)
229: (call, reset_queue, 0, T80)
230: (param list, 0, _, _)
231: (call, reset_pcs, 0, T81)
232: (return, _, _, _)
233: (function, bash, _, _)
234: (param list, 1, _, _)
235: (set param, 1, _, _)
236: (call, lcd, 1, T82)
237: (param list, 0, _, _)
238: (call, input, 0, T83)
239: (assign, choice, T83, _)
240: (param list, 1, _, _)
241: (set param, choice, _, _)
242: (call, output, 1, T84)
243: (equal, choice, 1, T85)
244: (jump if false, T85, L17, _)
245: (param list, 0, _, _)
246: (call, process_handling, 0, T86)
247: (label, L17, _, _)
248: (return, _, _, _)
249: (function, init_os, _, _)
250: (assign, i, 0, _)
251: (assign, MAX_PROCESS, 10, _)
252: (assign, MEM_SIZE, 1024, _)
253: (array address, FILE_MAX_SIZES, 1, T87)
254: (assign, FILE_MAX_SIZES, 50, 1)
255: (array address, FILE_MAX_SIZES, 2, T88)
256: (assign, FILE_MAX_SIZES, 0, 2)
257: (array address, FILE_MAX_SIZES, 3, T89)
258: (assign, FILE_MAX_SIZES, 0, 3)
259: (label, L18, _, _)
260: (less than, i, 10, T90)
261: (jump if false, T90, L19, _)
262: (array address, PROCESS_QUEUE, i, T91)
263: (assign, T91, 0, _)
264: (array address, STATE_PROC, i, T92)
265: (assign, T92, 0, _)
266: (array address, PROC_PCS, i, T93)
267: (assign, T93, 0, _)
268: (array address, FILE_ID, i, T94)
269: (assign, T94, i, _)
270: (addition, i, 1, T95)
271: (assign, i, T95, _)
272: (goto, L18, _, _)
273: (label, L19, _, _)
274: (return, _, _, _)
275: (function, main, _, _)
276: (param list, 0, _, _)
277: (call, init_os, 0, T96)
278: (param list, 1, _, _)
279: (set param, 0, _, _)
280: (call, lcd, 1, T97)
281: (param list, 0, _, _)
282: (call, input, 0, T98)
283: (assign, BASH_STOP, T98, _)
284: (label, L20, _, _)
285: (less than, 1, 2, T99)
286: (jump if false, T99, L21, _)
287: (param list, 0, _, _)
288: (call, bash, 0, T100)
289: (goto, L20, _, _)
290: (label, L21, _, _)

////////////Codigo Objeto////////////

load_proc_context:
    0:	addi	$sp, $sp, 7
        1:	sw	$a0, -4($sp)
        2:	li	$a0, 89
        3:	nop	
        4:	out	$a0
        5:	la	$s0, 23($gp)
        6:	lw	$s1, -4($sp)
        7:	add	$t0, $s0, $s1
        8:	lw	$t0, 0($t0)
        9:	sw	$t0, -3($sp)
        10:	li	$t1, 0
        11:	sw	$t1, -2($sp)
        12:	mov	$a0, $s1
        13:	nop	
        14:	out	$a0
        15:	la	$s2, 13($gp)
        16:	lw	$t2, 3($s2)
        17:	mov	$a0, $t2
        18:	nop	
        19:	out	$a0
        20:	lw	$t3, 4($s2)
        21:	mov	$a0, $t3
        22:	nop	
        23:	out	$a0
        24:	lw	$s3, 1($gp)
        25:	mov	$a0, $s3
        26:	nop	
        27:	out	$a0
        28:	mult	$t4, $s3, $s1
        29:	sw	$t4, 0($sp)
        30:	lw	$s4, 0($sp)
        31:	mov	$a0, $s4
        32:	nop	
        33:	out	$a0
    .L1	
    34:	lw	$s0, -2($sp)
        35:	lw	$s1, -3($sp)
        36:	lt	$t5, $s0, $s1
        37:	beq	$t5, $rzero, L2
        38:	lw	$s2, 0($sp)
        39:	mov	$a0, $s2
        40:	lhd	$t6, $a0
        41:	sw	$t6, -1($sp)
        42:	lw	$s3, -1($sp)
        43:	mov	$a0, $s3
        44:	mov	$a1, $s0
        45:	smemproc	$a0, $a1
        46:	addi	$t7, $s0, 1
        47:	sw	$t7, -2($sp)
        48:	lw	$s0, -2($sp)
        49:	addi	$t8, $s2, 1
        50:	sw	$t8, 0($sp)
        51:	lw	$s2, 0($sp)
        52:	j	L1
    .L2	
    53:	lw	$s0, -2($sp)
        54:	mov	$a0, $s0
        55:	nop	
        56:	out	$a0
        57:	li	$a0, 99
        58:	nop	
        59:	out	$a0
        60:	jr	$ra
    
circular_queue:
    61:	addi	$sp, $sp, 10
        62:	sw	$a0, -7($sp)
        63:	li	$t0, 0
        64:	sw	$t0, -5($sp)
        65:	li	$t1, 0
        66:	sw	$t1, -4($sp)
        67:	li	$t2, 0
        68:	sw	$t2, -1($sp)
        69:	li	$a0, 4
        70:	lcd	$a0
        71:	nop	
        72:	in	$t3
        73:	sw	$t3, 2($gp)
    .L3	
    74:	lw	$s0, -5($sp)
        75:	lw	$s1, -7($sp)
        76:	lt	$t4, $s0, $s1
        77:	beq	$t4, $rzero, L10
        78:	li	$a0, 12
        79:	nop	
        80:	out	$a0
        81:	li	$a0, 13
        82:	nop	
        83:	out	$a0
        84:	la	$s2, 3($gp)
        85:	lw	$s3, -4($sp)
        86:	add	$t5, $s2, $s3
        87:	lw	$t5, 0($t5)
        88:	sw	$t5, -6($sp)
        89:	lw	$s4, -6($sp)
        90:	sw	$s4, -3($sp)
        91:	la	$s5, 43($gp)
        92:	lw	$s6, -3($sp)
        93:	add	$t6, $s5, $s6
        94:	lw	$t6, 0($t6)
        95:	li	$t7, 0
        96:	eq	$t8, $t6, $t7
        97:	beq	$t8, $rzero, L7
        98:	mov	$a0, $s6
        99:	nop	
        100:	out	$a0
        101:	la	$s7, 33($gp)
        102:	add	$t9, $s7, $s6
        103:	lw	$t9, 0($t9)
        104:	sw	$t9, -1($sp)
        105:	lw	$s8, -1($sp)
        106:	mov	$a0, $s8
        107:	setpc	$a0
        108:	mov	$a0, $s6
        109:	sw	$ra, -8($sp)
        110:	jal	load_proc_context
        111:	subi	$sp, $sp, 7
        112:	lw	$ra, -8($sp)
        113:	mov	$s0, $v0
        114:	lw	$s1, -3($sp)
        115:	mov	$a0, $s1
        116:	nop	
        117:	chwrt	
        118:	mov	$a0, $a0
        119:	chrd	
        120:	mov	$s9, $a0
        121:	sprc	$s9
        122:	nop	
        123:	chrd	
        124:	chwrt	
        125:	nop	
        126:	li	$a0, 70
        127:	nop	
        128:	out	$a0
        129:	mov	$s2, $v1
        130:	sw	$s2, 0($sp)
        131:	lw	$s3, 0($sp)
        132:	mov	$a0, $s3
        133:	nop	
        134:	out	$a0
        135:	getpc	
        136:	mov	$s4, $v1
        137:	la	$s5, 33($gp)
        138:	add	$t0, $s5, $s1
        139:	sw	$s4, 0($t0)
        140:	li	$t1, 1
        141:	eq	$t2, $s3, $t1
        142:	beq	$t2, $rzero, L4
        143:	mov	$a0, $s3
        144:	nop	
        145:	out	$a0
        146:	nop	
        147:	in	$t3
        148:	sw	$t3, -2($sp)
        149:	lw	$s6, -2($sp)
        150:	mov	$a0, $s6
        151:	nop	
        152:	out	$a0
        153:	mov	$a0, $s6
        154:	chwrt	
        155:	mov	$v1, $a0
        156:	chwrt	
    .L4	
    157:	lw	$s0, 0($sp)
        158:	li	$t4, 2
        159:	eq	$t5, $s0, $t4
        160:	beq	$t5, $rzero, L5
        161:	mov	$a0, $s0
        162:	nop	
        163:	out	$a0
        164:	chrd	
        165:	mov	$s1, $v1
        166:	chrd	
        167:	sw	$s1, -2($sp)
        168:	lw	$s2, -2($sp)
        169:	mov	$a0, $s2
        170:	nop	
        171:	out	$a0
    .L5	
    172:	lw	$s0, 0($sp)
        173:	li	$t6, 3
        174:	eq	$t7, $s0, $t6
        175:	beq	$t7, $rzero, L6
        176:	mov	$a0, $s0
        177:	nop	
        178:	out	$a0
        179:	lw	$s1, -3($sp)
        180:	mov	$a0, $s1
        181:	nop	
        182:	out	$a0
        183:	la	$s2, 43($gp)
        184:	add	$t8, $s2, $s1
        185:	li	$t9, 1
        186:	sw	$t9, 0($t8)
        187:	lw	$s3, -5($sp)
        188:	addi	$t0, $s3, 1
        189:	sw	$t0, -5($sp)
        190:	lw	$s3, -5($sp)
    .L6	
.L7	
    191:	lw	$s0, -7($sp)
        192:	subi	$t1, $s0, 1
        193:	lw	$s1, -4($sp)
        194:	lt	$t2, $s1, $t1
        195:	beq	$t2, $rzero, L8
        196:	addi	$t3, $s1, 1
        197:	sw	$t3, -4($sp)
        198:	lw	$s1, -4($sp)
        199:	j	L9
    .L8	
    200:	li	$t4, 0
        201:	sw	$t4, -4($sp)
    .L9	
    202:	j	L3
    .L10	
    203:	li	$a0, 5
        204:	lcd	$a0
        205:	nop	
        206:	in	$t5
        207:	sw	$t5, 2($gp)
        208:	jr	$ra
    
reset_queue:
    209:	addi	$sp, $sp, 3
    .L11	
    210:	lw	$s0, 0($sp)
        211:	li	$t0, 10
        212:	lt	$t1, $s0, $t0
        213:	beq	$t1, $rzero, L12
        214:	la	$s1, 3($gp)
        215:	add	$t2, $s1, $s0
        216:	li	$t3, 0
        217:	sw	$t3, 0($t2)
        218:	addi	$t4, $s0, 1
        219:	sw	$t4, 0($sp)
        220:	lw	$s0, 0($sp)
        221:	j	L11
    .L12	
    222:	li	$a0, 87
        223:	nop	
        224:	out	$a0
        225:	jr	$ra
    
reset_pcs:
    226:	addi	$sp, $sp, 3
    .L13	
    227:	lw	$s0, 0($sp)
        228:	li	$t0, 10
        229:	lt	$t1, $s0, $t0
        230:	beq	$t1, $rzero, L14
        231:	la	$s1, 33($gp)
        232:	add	$t2, $s1, $s0
        233:	li	$t3, 0
        234:	sw	$t3, 0($t2)
        235:	addi	$t4, $s0, 1
        236:	sw	$t4, 0($sp)
        237:	lw	$s0, 0($sp)
        238:	j	L13
    .L14	
    239:	li	$a0, 47
        240:	nop	
        241:	out	$a0
        242:	jr	$ra
    
process_handling:
    243:	addi	$sp, $sp, 5
        244:	li	$a0, 2
        245:	lcd	$a0
        246:	nop	
        247:	in	$t0
        248:	sw	$t0, -2($sp)
        249:	lw	$s0, -2($sp)
        250:	mov	$a0, $s0
        251:	nop	
        252:	out	$a0
        253:	li	$t1, 0
        254:	sw	$t1, -1($sp)
        255:	li	$a0, 3
        256:	lcd	$a0
    .L15	
    257:	lw	$s0, -1($sp)
        258:	lw	$s1, -2($sp)
        259:	lt	$t2, $s0, $s1
        260:	beq	$t2, $rzero, L16
        261:	nop	
        262:	in	$t3
        263:	sw	$t3, 0($sp)
        264:	lw	$s2, 0($sp)
        265:	mov	$a0, $s2
        266:	nop	
        267:	out	$a0
        268:	la	$s3, 3($gp)
        269:	add	$t4, $s3, $s0
        270:	sw	$s2, 0($t4)
        271:	la	$s4, 43($gp)
        272:	add	$t5, $s4, $s0
        273:	li	$t6, 0
        274:	sw	$t6, 0($t5)
        275:	addi	$t7, $s0, 1
        276:	sw	$t7, -1($sp)
        277:	lw	$s0, -1($sp)
        278:	j	L15
    .L16	
    279:	lw	$s0, -2($sp)
        280:	mov	$a0, $s0
        281:	sw	$ra, -3($sp)
        282:	jal	circular_queue
        283:	subi	$sp, $sp, 10
        284:	lw	$ra, -3($sp)
        285:	mov	$s0, $v0
        286:	sw	$ra, -3($sp)
        287:	jal	reset_queue
        288:	subi	$sp, $sp, 3
        289:	lw	$ra, -3($sp)
        290:	mov	$s0, $v0
        291:	sw	$ra, -3($sp)
        292:	jal	reset_pcs
        293:	subi	$sp, $sp, 3
        294:	lw	$ra, -3($sp)
        295:	mov	$s0, $v0
        296:	jr	$ra
    
bash:
    297:	addi	$sp, $sp, 3
        298:	li	$a0, 1
        299:	lcd	$a0
        300:	nop	
        301:	in	$t0
        302:	sw	$t0, 0($sp)
        303:	lw	$s0, 0($sp)
        304:	mov	$a0, $s0
        305:	nop	
        306:	out	$a0
        307:	li	$t1, 1
        308:	eq	$t2, $s0, $t1
        309:	beq	$t2, $rzero, L17
        310:	sw	$ra, -1($sp)
        311:	jal	process_handling
        312:	subi	$sp, $sp, 5
        313:	lw	$ra, -1($sp)
        314:	mov	$s0, $v0
    .L17	
    315:	jr	$ra
    
init_os:
    316:	addi	$sp, $sp, 3
        317:	li	$t0, 0
        318:	sw	$t0, 0($sp)
        319:	li	$t1, 10
        320:	sw	$t1, 0($gp)
        321:	li	$t2, 1024
        322:	sw	$t2, 1($gp)
        323:	la	$s0, 23($gp)
        324:	li	$t3, 50
        325:	sw	$t3, 1($s0)
        326:	li	$t4, 0
        327:	sw	$t4, 2($s0)
        328:	li	$t5, 0
        329:	sw	$t5, 3($s0)
    .L18	
    330:	lw	$s0, 0($sp)
        331:	li	$t6, 10
        332:	lt	$t7, $s0, $t6
        333:	beq	$t7, $rzero, L19
        334:	la	$s1, 3($gp)
        335:	add	$t8, $s1, $s0
        336:	li	$t9, 0
        337:	sw	$t9, 0($t8)
        338:	la	$s2, 43($gp)
        339:	add	$t0, $s2, $s0
        340:	li	$t1, 0
        341:	sw	$t1, 0($t0)
        342:	la	$s3, 33($gp)
        343:	add	$t2, $s3, $s0
        344:	li	$t3, 0
        345:	sw	$t3, 0($t2)
        346:	la	$s4, 13($gp)
        347:	add	$t4, $s4, $s0
        348:	sw	$s0, 0($t4)
        349:	addi	$t5, $s0, 1
        350:	sw	$t5, 0($sp)
        351:	lw	$s0, 0($sp)
        352:	j	L18
    .L19	
    353:	jr	$ra
    
main:
    354:	addi	$sp, $gp, 1
        355:	addi	$sp, $sp, 54
        356:	sw	$ra, 0($sp)
        357:	jal	init_os
        358:	subi	$sp, $sp, 3
        359:	lw	$ra, 0($sp)
        360:	mov	$s0, $v0
        361:	li	$a0, 0
        362:	lcd	$a0
        363:	nop	
        364:	in	$t0
        365:	sw	$t0, 2($gp)
    .L20	
    366:	li	$t1, 1
        367:	li	$t2, 2
        368:	lt	$t3, $t1, $t2
        369:	beq	$t3, $rzero, L21
        370:	sw	$ra, 0($sp)
        371:	jal	bash
        372:	subi	$sp, $sp, 3
        373:	lw	$ra, 0($sp)
        374:	mov	$s0, $v0
        375:	j	L20
    .L21	
    376:	subi	$sp, $sp, 1
        377:	hlt	
    